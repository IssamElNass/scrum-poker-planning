name: Release

on:
  push:
    tags:
      - "v*.*.*" # Triggers on version tags like v1.0.0, v2.1.3, etc.
  release:
    types: [published]
  workflow_dispatch: # Allow manual triggering

jobs:
  # Lint and Type Check
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check TypeScript
        run: npm run ts:check

  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: lint-and-type-check

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: npm run test:e2e:headless
        env:
          CI: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            .next/
            package.json
            package-lock.json
          retention-days: 30

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-release
          path: playwright-report/
          retention-days: 30

  # Create Release Archive
  create-release-archive:
    name: Create Release Archive
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create release archive
        run: |
          mkdir -p release
          cp -r .next release/
          cp package.json package-lock.json release/
          cp -r public release/
          cp -r src release/
          cp -r convex release/
          cp next.config.ts release/
          cp tsconfig.json release/
          cp tailwind.config.ts release/ 2>/dev/null || true
          cp postcss.config.mjs release/ 2>/dev/null || true
          cp components.json release/ 2>/dev/null || true
          tar -czf poker-planning-${{ steps.get_version.outputs.VERSION }}.tar.gz -C release .

      - name: Upload release archive
        uses: actions/upload-artifact@v4
        with:
          name: release-archive
          path: poker-planning-${{ steps.get_version.outputs.VERSION }}.tar.gz
          retention-days: 90

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: poker-planning-${{ steps.get_version.outputs.VERSION }}.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deploy to Production (if you have deployment setup)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      # Add your deployment steps here
      # Example for Vercel:
      # - name: Deploy to Vercel
      #   uses: amondnet/vercel-action@v25
      #   with:
      #     vercel-token: ${{ secrets.VERCEL_TOKEN }}
      #     vercel-org-id: ${{ secrets.ORG_ID }}
      #     vercel-project-id: ${{ secrets.PROJECT_ID }}
      #     vercel-args: '--prod'

      # Example for other platforms:
      # - name: Deploy to Production
      #   run: |
      #     echo "Add your deployment commands here"
      #     # npm run deploy:prod
      #     # or other deployment commands

      - name: Deployment Success
        run: echo "Production deployment completed successfully!"

  # Notify on Success
  release-success:
    name: Release Success
    runs-on: ubuntu-latest
    needs: [create-release-archive, deploy-production]
    if: always() && (needs.create-release-archive.result == 'success' || needs.deploy-production.result == 'success')

    steps:
      - name: Release completed
        run: |
          echo "ðŸŽ‰ Release workflow completed successfully!"
          echo "Tag: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
